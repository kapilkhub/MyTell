//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace MyTell.Mobile.App.Clients.IdentityManagement
{
	using System = global::System;

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial interface IIdentityManagementClient
	{
		/// <summary>
		/// Creates user without password
		/// </summary>
		/// <remarks>
		/// Creates user without password and Activation status
		/// </remarks>
		/// <returns>OK</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<CreateUserWithoutCredentialsOKResponse> UserAsync(string activate, CreateUserWithoutCredentialsRequest body);

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates user without password
		/// </summary>
		/// <remarks>
		/// Creates user without password and Activation status
		/// </remarks>
		/// <returns>OK</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<CreateUserWithoutCredentialsOKResponse> UserAsync(string activate, CreateUserWithoutCredentialsRequest body, System.Threading.CancellationToken cancellationToken);

		/// <summary>
		/// Creates user in group without password
		/// </summary>
		/// <remarks>
		/// Creates user in group without password and Activation status
		/// </remarks>
		/// <returns>OK</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<CreateUserInGroupOKResponse> GroupAsync(string activate, CreateUserInGroupRequest body);

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates user in group without password
		/// </summary>
		/// <remarks>
		/// Creates user in group without password and Activation status
		/// </remarks>
		/// <returns>OK</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<CreateUserInGroupOKResponse> GroupAsync(string activate, CreateUserInGroupRequest body, System.Threading.CancellationToken cancellationToken);

		/// <summary>
		/// Creates user with password
		/// </summary>
		/// <remarks>
		/// Creates user with password and Activation status
		/// </remarks>
		/// <returns>OK</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<CreateUserWithPasswordResponse> PasswordAsync(string activate, CreateUserWithPasswordRequest body);

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates user with password
		/// </summary>
		/// <remarks>
		/// Creates user with password and Activation status
		/// </remarks>
		/// <returns>OK</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<CreateUserWithPasswordResponse> PasswordAsync(string activate, CreateUserWithPasswordRequest body, System.Threading.CancellationToken cancellationToken);

	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class IdentityManagementClient : IIdentityManagementClient
	{
#pragma warning disable 8618
		private string _baseUrl;
#pragma warning restore 8618

		private System.Net.Http.HttpClient _httpClient;
		private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
		public IdentityManagementClient(string baseUrl, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
		{
			BaseUrl = baseUrl;
			_httpClient = httpClient;
		}

		private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
		{
			var settings = new Newtonsoft.Json.JsonSerializerSettings();
			UpdateJsonSerializerSettings(settings);
			return settings;
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set
			{
				_baseUrl = value;
				if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
					_baseUrl += '/';
			}
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <summary>
		/// Creates user without password
		/// </summary>
		/// <remarks>
		/// Creates user without password and Activation status
		/// </remarks>
		/// <returns>OK</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<CreateUserWithoutCredentialsOKResponse> UserAsync(string activate, CreateUserWithoutCredentialsRequest body)
		{
			return UserAsync(activate, body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates user without password
		/// </summary>
		/// <remarks>
		/// Creates user without password and Activation status
		/// </remarks>
		/// <returns>OK</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<CreateUserWithoutCredentialsOKResponse> UserAsync(string activate, CreateUserWithoutCredentialsRequest body, System.Threading.CancellationToken cancellationToken)
		{
			if (activate == null)
				throw new System.ArgumentNullException("activate");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "user"
					urlBuilder_.Append("user");
					urlBuilder_.Append('?');
					urlBuilder_.Append(System.Uri.EscapeDataString("Activate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<CreateUserWithoutCredentialsOKResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 422)
						{
							var objectResponse_ = await ReadObjectResponseAsync<CreateUserBadRequestResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<CreateUserBadRequestResponse>("Unprocessable Entity", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <summary>
		/// Creates user in group without password
		/// </summary>
		/// <remarks>
		/// Creates user in group without password and Activation status
		/// </remarks>
		/// <returns>OK</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<CreateUserInGroupOKResponse> GroupAsync(string activate, CreateUserInGroupRequest body)
		{
			return GroupAsync(activate, body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates user in group without password
		/// </summary>
		/// <remarks>
		/// Creates user in group without password and Activation status
		/// </remarks>
		/// <returns>OK</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<CreateUserInGroupOKResponse> GroupAsync(string activate, CreateUserInGroupRequest body, System.Threading.CancellationToken cancellationToken)
		{
			if (activate == null)
				throw new System.ArgumentNullException("activate");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "user/group"
					urlBuilder_.Append("user/group");
					urlBuilder_.Append('?');
					urlBuilder_.Append(System.Uri.EscapeDataString("Activate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<CreateUserInGroupOKResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 422)
						{
							var objectResponse_ = await ReadObjectResponseAsync<CreateUserBadRequestResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<CreateUserBadRequestResponse>("Unprocessable Entity", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <summary>
		/// Creates user with password
		/// </summary>
		/// <remarks>
		/// Creates user with password and Activation status
		/// </remarks>
		/// <returns>OK</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual System.Threading.Tasks.Task<CreateUserWithPasswordResponse> PasswordAsync(string activate, CreateUserWithPasswordRequest body)
		{
			return PasswordAsync(activate, body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>
		/// Creates user with password
		/// </summary>
		/// <remarks>
		/// Creates user with password and Activation status
		/// </remarks>
		/// <returns>OK</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public virtual async System.Threading.Tasks.Task<CreateUserWithPasswordResponse> PasswordAsync(string activate, CreateUserWithPasswordRequest body, System.Threading.CancellationToken cancellationToken)
		{
			if (activate == null)
				throw new System.ArgumentNullException("activate");

			if (body == null)
				throw new System.ArgumentNullException("body");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
					var content_ = new System.Net.Http.StringContent(json_);
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					var urlBuilder_ = new System.Text.StringBuilder();
					if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
					// Operation Path: "user/password"
					urlBuilder_.Append("user/password");
					urlBuilder_.Append('?');
					urlBuilder_.Append(System.Uri.EscapeDataString("Activate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(activate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
					urlBuilder_.Length--;

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try
					{
						var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
						foreach (var item_ in response_.Headers)
							headers_[item_.Key] = item_.Value;
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<CreateUserWithPasswordResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<HttpValidationProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new ApiException<HttpValidationProblemDetails>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (disposeClient_)
					client_.Dispose();
			}
		}

		protected struct ObjectResponseResult<T>
		{
			public ObjectResponseResult(T responseObject, string responseText)
			{
				this.Object = responseObject;
				this.Text = responseText;
			}

			public T Object { get; }

			public string Text { get; }
		}

		public bool ReadResponseAsString { get; set; }

		protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
		{
			if (response == null || response.Content == null)
			{
				return new ObjectResponseResult<T>(default(T)!, string.Empty);
			}

			if (ReadResponseAsString)
			{
				var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
					return new ObjectResponseResult<T>(typedBody!, responseText);
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
				}
			}
			else
			{
				try
				{
					using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
					using (var streamReader = new System.IO.StreamReader(responseStream))
					using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
					{
						var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
						var typedBody = serializer.Deserialize<T>(jsonTextReader);
						return new ObjectResponseResult<T>(typedBody!, string.Empty);
					}
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
				}
			}
		}

		private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value == null)
			{
				return "";
			}

			if (value is System.Enum)
			{
				var name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value != null ? attribute.Value : name;
						}
					}

					var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
					return converted == null ? string.Empty : converted;
				}
			}
			else if (value is bool)
			{
				return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value is string[])
			{
				return string.Join(",", (string[])value);
			}
			else if (value.GetType().IsArray)
			{
				var valueArray = (System.Array)value;
				var valueTextArray = new string[valueArray.Length];
				for (var i = 0; i < valueArray.Length; i++)
				{
					valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
				}
				return string.Join(",", valueTextArray);
			}

			var result = System.Convert.ToString(value, cultureInfo);
			return result == null ? "" : result;
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Activate
	{
		[Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Href { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Method { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateUserBadRequestResponse
	{
		[Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ErrorCode { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("errorSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ErrorSummary { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("errorLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ErrorLink { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("errorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ErrorId { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("errorCauses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ErrorCauses>? ErrorCauses { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateUserInGroupOKResponse
	{
		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Id { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Status { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset Created { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("activated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset Activated { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("statusChanged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset StatusChanged { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("lastLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? LastLogin { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("lastUpdated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset LastUpdated { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("passwordChanged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? PasswordChanged { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Type Type { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Profile2 Profile { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Credentials Credentials { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Links2 _links { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateUserInGroupRequest
	{
		[Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Profile Profile { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("groupIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<string>? GroupIds { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateUserWithPasswordRequest
	{
		[Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Profile Profile { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Credentials2 Credentials { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateUserWithPasswordResponse
	{
		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Id { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Status { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset Created { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("activated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? Activated { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("statusChanged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? StatusChanged { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("lastLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? LastLogin { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("lastUpdated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset LastUpdated { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("passwordChanged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset PasswordChanged { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Type Type { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Profile2 Profile { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Credentials3 Credentials { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Links _links { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateUserWithoutCredentialsOKResponse
	{
		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Id { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Status { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset Created { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("activated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? Activated { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("statusChanged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? StatusChanged { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("lastLogin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? LastLogin { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("lastUpdated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset LastUpdated { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("passwordChanged", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? PasswordChanged { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Type Type { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Profile2 Profile { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Credentials Credentials { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("_links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Links _links { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class CreateUserWithoutCredentialsRequest
	{
		[Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Profile Profile { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Credentials
	{
		[Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Emails>? Emails { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Provider Provider { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Credentials2
	{
		[Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Emails Password { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Credentials3
	{
		[Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Password Password { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<Emails>? Emails { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Provider Provider { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Emails
	{
		[Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Value { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Status { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Type { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ErrorCauses
	{
		[Newtonsoft.Json.JsonProperty("errorSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ErrorSummary { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class HttpValidationProblemDetails
	{
		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Type { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Title { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Status { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Detail { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Instance { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Errors { get; set; } = default!;

		private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
		{
			get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
			set { _additionalProperties = value; }
		}

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Links
	{
		[Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Activate Schema { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("activate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Activate Activate { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Activate Self { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Type Type { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Links2
	{
		[Newtonsoft.Json.JsonProperty("suspend", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Activate Suspend { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Activate Schema { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("resetPassword", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Activate ResetPassword { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("reactivate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Activate Reactivate { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Activate Self { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Type Type { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("deactivate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Activate Deactivate { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Password
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Profile
	{
		[Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FirstName { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? LastName { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Email { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Login { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Profile2
	{
		[Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? FirstName { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? LastName { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("mobilePhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? MobilePhone { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("secondEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public object? SecondEmail { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Login { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Email { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Provider
	{
		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Type { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Name { get; set; } = default!;

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class Type
	{
		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Id { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Href { get; set; } = default!;

	}



	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ApiException : System.Exception
	{
		public int StatusCode { get; private set; }

		public string? Response { get; private set; }

		public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
			: base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
		}

		public override string ToString()
		{
			return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
	public partial class ApiException<TResult> : ApiException
	{
		public TResult Result { get; private set; }

		public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
			: base(message, statusCode, response, headers, innerException)
		{
			Result = result;
		}
	}

}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625